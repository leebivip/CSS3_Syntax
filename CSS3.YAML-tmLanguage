# [PackageDev] target_format: plist, ext: tmLanguage
---
name: CSS3
scopeName: text.css
fileTypes: [css]
uuid: 8195f5b1-d6d5-4ceb-b15b-e939b3d3fcdd

patterns:
- include: '#block-comment'
- include: '#at-charset'
- include: '#at-font-face'
- include: '#at-font-feature-values'
- include: '#at-import'
- include: '#at-keyframes'
- include: '#at-media'
- include: '#at-namespace'
- include: '#at-page'
- include: '#at-supports'
- include: '#selector'
- include: '#block'

repository:

  at-charset:
    # deviation from spec: must be on one line.
    # name: invalid.illegal.css
    match: (@charset)\s+(?i)(\"(unicode-1-1-)?utf-?8\"|\'(unicode-1-1-)?utf-?8\')\s*;
    captures:
      '1': {name: keyword.at-rule.css}
      '2': {name: string.quoted.css}

  at-font-face:
    # name: invalid.deprecated.css
    begin: (@font-face)
    beginCaptures:
      '0': {name: keyword.at-rule.css}
    contentName: punctuation.css
    patterns:
    - include: '#block-comment'
    - include: '#font-descriptor'
    - include: '#unicode-range'
    - include: '#font-descriptor-value'
    end: \}

  at-font-feature-values:
    # name: invalid.deprecated.css
    begin: (@font-feature-values)
    beginCaptures:
      '0': {name: keyword.at-rule.css}
    contentName: punctuation.css
    patterns:
    - include: '#block-comment'
    - include: '#font-family-name-list'
    - include: '#font-feature-block'
    end: \}

  at-import:
    # name: invalid.deprecated.css
    begin: (@import)
    beginCaptures:
      '0': {name: keyword.at-rule.css}
    contentName: punctuation.css
    patterns:
    - include: '#block-comment'
    - include: '#url'
    - include: '#double-quoted-string'
    - include: '#single-quoted-string'
    - include: '#deprecated-media-type'
    - include: '#media-type'
    - include: '#logic-operator'
    - include: '#media-feature'
    end: ;

  at-keyframes:
    # name: invalid.deprecated.css
    begin: (@keyframes)
    beginCaptures:
      '0': {name: keyword.at-rule.css}
    contentName: punctuation.css
    patterns:
    - include: '#block-comment'
    - include: '#keyframes-identifier'
    - include: '#keyframes-selector'
    - include: '#block'
    end: \}

  at-media:
    # name: invalid.deprecated.css
    begin: (@media)
    beginCaptures:
      '0': {name: keyword.at-rule.css}
    contentName: punctuation.css
    patterns:
    - include: '#block-comment'
    - include: $self
    - include: '#media-condition-list'
    end: \}

  at-namespace:
    # name: invalid.deprecated.css
    begin: (@namespace)
    beginCaptures:
      '0': {name: keyword.at-rule.css}
    contentName: punctuation.css
    patterns:
    - include: '#block-comment'
    - include: '#url'
    - include: '#double-quoted-string'
    - include: '#single-quoted-string'
    - include: '#identifier'
    end: ;

  at-page:
    # name: invalid.deprecated.css
    begin: (@page)
    beginCaptures:
      '0': {name: keyword.at-rule.css}
    contentName: punctuation.css
    patterns:
    - include: '#block-comment'
    - include: '#at-page-selector'
    - include: '#page-margin-block'
    - include: '#property'
    - include: '#value'
    end: \}

  at-page-selector:
    # name: invalid.deprecated.css
    begin: (?<=@page)
    patterns:
    - include: '#block-comment'
    - include: '#pseudo-page'
    - include: '#identifier'
    end: (?=\{)

  at-supports:
    # name: invalid.deprecated.css
    begin: (@supports)
    beginCaptures:
      '0': {name: keyword.at-rule.css}
    contentName: punctuation.css
    patterns:
    - include: '#block-comment'
    - include: $self
    - include: '#supports-selector'
    - include: '#block'
    end: \}

  block:
    # name: invalid.deprecated.css
    begin: \{
    patterns:
    - include: '#block-comment'
    - include: '#property'
    - include: '#value'
    end: \}

  block-comment:
    name: comment.block.css
    begin: '/\*'
    end: '\*/'

  color-name:
    name: constant.other.css
    match: \b(aliceblue|antiquewhite|aqua(marine)?|azure|beige|bisque|black|blanchedalmond|blue(violet)?|brown|burlywood|cadetblue|chartreuse|chocolate|coral|corn(flowerblue|silk)|crimson|currentColor|dark(blue|cyan|goldenrod|gray|green|grey|khaki|magenta|olivegreen|orange|orchid|red|salmon|seagreen|slateblue|slategray|slategrey|turquoise|violet)|deep(pink|skyblue)|dimgr(a|e)y|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold(enrod)?|gr(a|e)y|green(yellow)?|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender(blush)?|lawngreen|lemonchiffon|light(blue|coral|cyan|goldenrodyellow|gray|green|grey|pink|salmon|seagreen|skyblue|slategray|slategrey|steelblue|yellow)|lime(green)?|linen|maroon|medium(aquamarine|blue|orchid|purple|seagreen|slateblue|springgreen|turquoise|violetred)|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive(drab)?|orange(red)?|orchid|pale(goldenrod|green|turquoise|violetred)|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|sea(green|shell)|sienna|silver|skyblue|slate(blue|gr(a|e)y)|snow|springgreen|steelblue|tan|teal|thistle|tomato|transparent|turquoise|violet|wheat|white(smoke)?|yellow(green)?)\b

  # deprecated-html-tag:
  #   name: invalid.deprecated.css
  #   # TODO: add complete list of deprecated tags
  #   match: \bhgroup\b

  deprecated-media-type:
    name: invalid.deprecated.css
    match: \b(aural|braille|embossed|handheld|projection|tty|tv)\b

  deprecated-pseudo-element:
    name: invalid.deprecated.css
    match: :(after|before|first-(letter|line))

  double-quoted-string:
    name: string.quoted.double.css
    match: \"([^\n\r\f\\"]|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*\"

  font-descriptor:
    # name: invalid.deprecated.css
    match: (((font-)(family|feature-settings|stretch|style|variant|weight)|src|unicode-range))\s*(?=:)
    captures:
      '1': {name: support.type.css}

  font-descriptor-value:
    begin: ':'
    patterns:
    - include: '#block-comment'
    - include: '#url'
    - include: '#font-function-format'
    - include: '#font-function'
    - include: '#double-quoted-string'
    - include: '#single-quoted-string'
    - include: '#font-descriptor-named-value'
    - include: '#unicode-range'
    - include: '#identifier'
    end: ;

  font-descriptor-named-value:
    # named values for a font descriptor
    # e.g. normal, italic, historical-forms, bold, 900
    # TODO: assign a proper name to this
    name: variable.parameter.css
    match: \b(normal|italic|oblique|bold|[1-9]00|((ultra|extra|semi)-)?(condensed|expanded)|none|(no-)?(common|discretionary|historical)-ligatures|(no-)?contextual|historical-forms|(all-)?(small|petite)-caps|unicase|titling-caps|(lining|oldstyle|proportional|tabular)-nums|(diagonal|stacked)-fractions|ordinal|slashed-zero|jis(78|83|90|04)|simplified|traditional|(full|proportional)-width|ruby|off|on)\b

  font-family-name-list:
    # name: invalid.deprecated.css
    begin: (?<=@font-feature-values)
    patterns:
    - include: '#block-comment'
    - include: '#double-quoted-string'
    - include: '#single-quoted-string'
    - include: '#identifier'
    end: (?=\{)

  font-feature-block:
    # name: invalid.deprecated.css
    begin: (@(annotation|character-variant|ornaments|styl(eset|istic)|swash))
    beginCaptures:
      '0': {name: keyword.font-feature-type.css}
    patterns:
    - include: '#block-comment'
    - include: '#font-feature-property'
    - include: '#number'
    end: \}

  font-feature-property:
    # custom identifiers associated with fonts that specify font variations
    # e.g. @swash { delicate: 1; flowing: 2}
    # note that this is the regex for an identifier, followed by a colon
    match: '(-?([a-zA-Z_\p{^ASCII}]|\\([0-9a-fA-F]{1,6}|[^\n]))([-a-zA-Z0-9_\p{^ASCII}]|\\([^\n]|[0-9a-fA-F]{1,6}))*)\s*:'
    captures:
      '1': {name: support.type.css}

  font-function:
    # deviation from spec: no space permitted between the function name and
    # the opening paren
    match: ((annotation|character-variant|local|ornaments|styl(eset|istic)|swash))\(
    captures:
      '1': {name: entity.name.function.css}

  font-function-format:
    # special rule for function() that enumerates all possible valid arguments
    match: (format)\(\s*(\"(woff|(true|(embedded-)?open)type|svg)\"|\'(woff|(true|(embedded-)?open)type|svg)\')\s*\)
    captures:
      '1': {name: entity.name.function.css}
      '2': {name: string.quoted.css}

  function:
    name: entity.name.function.css
    match: (-(ah|apple|atsc|epub|hp|ibooks|khtml|moz|mso?|o|prince|rim|ro|tc|wap|weasy|webkit|x)-)?((attr|blur|brightness|calc|contrast|counter(-increment)?|cross-fade|cubic-bezier|cycle|drop-shadow|element|grayscale|hsla?|hue-rotate|image|invert|linear-gradient|matrix(3d)?|opacity|perspective|radial-gradient|rect|repeating-(linear|radial)-gradient|rgba?|rotate(x|y|z|3d)?|saturate|scale(x|y|z|3d)?|sepia|skew(x|y)?|steps|translate(x|y|z|3d)?|url|var))(?=\()

  hex-color:
    name: constant.numeric.css
    match: '#(\b[0-9a-fA-F]{6}\b|\b[0-9a-fA-F]{3}\b)'

  html-tag:
    # TODO: assign a proper name to this
    name: variable.parameter.css
    match: \b(abbr|address|area|article|aside|audio|a|base|bdi|bdo|blockquote|body|br|button|b|canvas|caption|cite|code|col(group)?|data(list)?|dd|del|details|dfn|dialog|div|dl|dt|em(bed)?|fieldset|figcaption|figure|footer|form|h[1-6]|head(er)?|hr|html|i(frame)?|img|input|ins|kbd|keygen|label|legend|li(nk)?|main|map|mark|math|menu(item)?|meta|meter|nav|noscript|object|ol|optgroup|option|output|param|pre|progress|p|q|rb|rp|rtc?|ruby|samp|script|section|select|small|source|span|strong|style|sub|summary|sup|svg|s|table|tbody|td|template|textarea|tfoot|th(ead)?|time|title|tr(ack)?|ul?|var|video|wbr)\b

  identifier:
    # TODO: assign a proper name to this
    name: string.unquoted.css
    match: -?([a-zA-Z_\p{^ASCII}]|\\([0-9a-fA-F]{1,6}|[^\n]))([-a-zA-Z0-9_\p{^ASCII}]|\\([^\n]|[0-9a-fA-F]{1,6}))*

  keyframes-identifier:
    # identical to the generic identifier, except that it ends in an opening
    # curly brace {
    # name: invalid.deprecated.css
    begin: (?<=@keyframes)
    patterns:
    - include: '#block-comment'
    - include: '#identifier'
    end: \{

  keyframes-selector:
    # deviation from spec: percentage selectors are limited to integers between 0 and 100
    # name: invalid.deprecated.css
    begin: (\b(from|to)\b|([0-9]|[1-9][0-9]|100)%)
    beginCaptures:
      # TODO: assign a proper name to this
      '0': {name: entity.name.function.css}
    patterns:
    - include: '#block-comment'
    end: (?=\{)

  media-condition-list:
    begin: (?<=@media)
    patterns:
    - include: '#block-comment'
    - include: '#deprecated-media-type'
    - include: '#media-type'
    - include: '#logic-operator'
    - include: '#media-feature'
    end: \{

  media-feature:
    begin: \(
    patterns:
    - include: '#block-comment'
    - include: '#media-feature-discrete-value'
    - include: '#media-feature-property'
    - include: '#unit'
    - include: '#ratio'
    - include: '#number'
    - include: '#operator'
    end: \)

  media-feature-discrete-value:
    # name: invalid.deprecated.css
    match: :\s*((0|1|coarse|dim|enabled|fine|initial-only|interlace|landscape|none|normal|on-demand|optional-paged|over|paged|portrait|progressive|scroll|slow|washed))\b
    captures:
      # TODO: assign a proper name to this
      '1': {name: entity.name.function.css}

  media-feature-property:
    # name: invalid.deprecated.css
    name: support.type.css
    match: \b((min|max)-)?((device-)?(aspect-ratio|height|width)|color(-index)?|grid|hover|light-level|resolution|monochrome|orientation|overflow-(block|inline)|pointer|resolution|scan|scripting|update-frequency)\b

  logic-operator:
    # name: keyword.deprecated.css
    match: \s((and|not|only|or))\s
    captures:
      '1': {name: keyword.operator.css}

  media-type:
    # TODO: assign a proper name to this
    # name: invalid.deprecated.css
    name: variable.parameter.css
    match: all|print|screen|speech

  named-value:
    # TODO: assign a proper name to this
    name: variable.parameter.css
    match: (absolute|active|alias|all(-scroll)?|alpha|alternate(-reverse)?|always|armenian|auto|available|avoid(-(column|page|region))?|backwards|balance|baseline|bidi-override|block|bold(er)?|border-box|both|bottom|break-(all|word)|bt-(lr|rl)|capitalize|caption|cell|center|circle|clip|close-quote|col-resize|collapse|color(-(burn|dodge))?|column(-reverse)?|complex|condensed|contain|content(-box)?|context-menu|copy|cover|crisp-edges|crop|cross(hair)?|cursive|darken|dashed|decimal(-leading-zero)?|default|difference|disabled|disc|dotted|double|e-resize|each-line|ease(-(in(-out)?|out))?|ellipsis|embed|end|ew-resize|exclusion|expanded|extra-(condensed|expanded)|fantasy|fill(-available)?|fit-content|fixed|flat|flex(-(end|start))?|flexbox|flip|forwards|from-image|full-width|geometricPrecision|georgian|grab(bing)?|grid|groove|hanging|hard-light|help|hidden|hide|horizontal(-tb)?|hue|icon|inactive|infinite|inherit|initial|inline(-(block|flex|grid|table))?|inset|inside|invert|isolate(-override)?|italic|justify|keep-all|larger?|left|lighte(n|r)|line-through|linear|list-item|local|lower-(alpha|greek|latin|roman)|lowercase|lr(-(bt|tb))?|ltr|lumin(ance|osity)|manual|match-parent|max-content|medium|menu|message-box|middle|min-content|monospace|move|multiply|n(esw|e)?-resize|no-(close-quote|drop|open-quote|repeat)|none|normal|not-allowed|nowrap|n(wse|s|w)-resize|oblique|open-quote|optimizeLegibility|optimizeSpeed|outs(et|ide)|overl(ay|ine)|padding-box|page|painted|paused|pixelated|plaintext|pointer|pre(-(line|wrap))?|preserve(-3d)?|progress|recto|region|relative|repeat(-(x|y))?|reverse|ridge|right|rl(-(bt|tb))?|round|row(-(resize|reverse))?|rtl|run(-in|ning)|s-resize|sans-serif|saturation|screen|scroll|se-resize|semi-(condensed|expanded)|separate|serif|show|small(er|-(caps|caption))?|soft-light|solid|space(-(around|between))?|square|start|static|status-bar|step-(end|start)|sticky|stretch|stroke|sub|super|sw-resize|table(-(caption|cell|(column|row)(-group)?|(header|footer)-group))?|tb(-(lr|rl))?|text(-(bottom|top))?|thick|thin|top|ultra-(condensed|expanded)|under(line)?|unset|upper-(alpha|latin|roman)|uppercase|verso|vertical(-(lr|rl|text))?|visible(Fill|Painted|Stroke)?|w-resize|wait|wavy|wrap(-reverse)?|x-(large|small)|xx-(large|small)|zoom-(in|out))\b

  number:
    name: constant.numeric.css
    match: '[-+]?([0-9]+|[0-9]*\.[0-9]+)([eE][-+]?[0-9]+)?'

  # non-negative-integer:
  #   name: constant.numeric.css
  #   match: (?<!-)[0-9]+

  # non-negative-number:
  #   name: constant.numeric.css
  #   match: (?<!-)(\+?[0-9]+|[0-9]*\.[0-9]+)([eE][-+]?[0-9]+)?

  operator:
    # name: invalid.deprecated.css
    name: keyword.operator.css
    match: (?<=\s)([-+<>=*/]|<=|>=)(?=\s)

  page-margin-block:
    # name: invalid.illegal.css
    begin: (@((top|bottom)-((left|right)(-corner)?|center)|(left|right)-(top|middle|bottom)))
    beginCaptures:
      '1': {name: keyword.at-rule.css}
    patterns:
    - include: '#block-comment'
    - include: '#block'
    end: (?<=\})

  property:
    # TODO: assign a proper name to this
    # name: invalid.deprecated.css
    name: storage.type.css
    match: (-(ah|apple|atsc|epub|hp|ibooks|khtml|moz|mso?|o|prince|rim|ro|tc|wap|weasy|webkit|x)-)?(align-(content|items|self)|all|animation(-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function))?|backface-visibility|background(-(attachment|clip|color|image|origin|position|repeat|size))?|border(-(bottom(-(color|(left|right)-radius|style|width))?|collapse|color|image(-(outset|repeat|slice|source|width))?|left(-(color|style|width))?|radius|right(-(color|style|width))?|spacing|style|top(-(color|(left|right)-radius|style|width))?|width))?|bottom|box-(decoration-break|shadow|sizing)|break-(after|before|inside)|caption-side|clear|clip(-path)?|color|columns|column-(count|fill|gap|rule(-(color|style|width))?|span|width)|content|counter-(increment|reset)|cursor|direction|display|empty-cells|filter|flex(-(basis|direction|flow|grow|shrink|wrap))?|float|font(-(family|feature-settings|kerning|language-override|size(-adjust)?|stretch|style|synthesis|variant(-(alternates|caps|east-asian|ligatures|numeric|position))?|weight))?|height|hyphens|icon|image-(rendering|resolution|orientation)|ime-mode|inherit|initial|justify-content|left|letter-spacing|line-height|list-style(-(image|position|type))?|margin(-(bottom|left|right|top))?|marks|mask(-type)?|max-(height|width)|min-(height|width)|nav-(down|index|left|right|up)|object-(fit|position)|opacity|order|orphans|outline(-(color|offset|style|width))?|overflow(-(wrap|x|y|))?|padding(-(bottom|left|right|top))?|page-break-(after|before|inside)|perspective(-origin)?|pointer-events|position|quotes|resize|right|size|src|table-layout|tab-size|text-(align(-last)?|combine-horizontal|decoration(-(color|line|style))?|indent|orientation|overflow|rendering|shadow|transform|underline-position)|top|touch-action|transform(-(origin|style))?|transition(-(delay|duration|property|timing-function))?|unicode-(bidi|range)|vertical-align|visibility|white-space|widows|width|word-(break|spacing|wrap)|writing-mode|z-index)\s*(?=:)

  pseudo-element:
    # TODO: assign a proper name to this
    name: constant.numeric.css
    match: ::(-(ah|apple|atsc|epub|hp|ibooks|khtml|moz|mso?|o|prince|rim|ro|tc|wap|weasy|webkit|x)-)?(after|before|first-(letter|line)|selection)

  pseudo-page:
    # TODO: assign a proper name to this
    name: support.type.css
    match: :(blank|first|left|right)

  ratio:
    # name: invalid.deprecated.css
    match: ((?<!-)[0-9]+)\s*/\s*((?<!-)[0-9]+)
    captures:
      '1': {name: constant.numeric.css}
      '2': {name: constant.numeric.css}

  selector:
    # name: invalid.illegal.css
    begin: (?=[!:.*#\p{L}-])
    patterns:
    - include: '#block-comment'
    - include: '#pseudo-element'
    - include: '#deprecated-pseudo-element'
    # - include: '#pseudo-class'
    # - include: '#html-id'
    # - include: '#html-class'
    - include: '#deprecated-html-tag'
    - include: '#html-tag'

    # TODO: try removing the semicolon from end when project is almost finished
    end: (?=\{|;)

  single-quoted-string:
    name: string.quoted.single.css
    match: \'([^\n\r\f\\']|\\(\n|\r\n|\r|\f)|((\\[0-9a-f]{1,6}(\r\n|[ \n\r\t\f])?)|\\[^\n\r\f0-9a-f]))*\'

  supports-condition:
    # name: invalid.deprecated.css
    begin: \(
    patterns:
    - include: '#block-comment'
    - include: '#supports-condition'
    - include: '#property'
    - include: '#supports-condition-value'
    - include: '#logic-operator'
    end: \)

  supports-condition-value:
    # this is identical to #value except that it ends just before a closing paren
    # name: invalid.deprecated.css
    begin: ':'
    patterns:
    - include: '#block-comment'
    - include: '#double-quoted-string'
    - include: '#single-quoted-string'
    - include: '#url'
    - include: '#function'
    - include: '#unit'
    - include: '#color-name'
    - include: '#hex-color'
    - include: '#named-value'
    - include: '#number'
    - include: '#identifier'
    end: (?=\))

  supports-selector:
    # name: invalid.deprecated.css
    begin: (?<=@supports)
    patterns:
    - include: '#block-comment'
    - include: '#property'
    - include: '#supports-condition'
    - include: '#logic-operator'
    end: \{

  unicode-range:
    # TODO: assign a proper name to this
    name: constant.numeric.css
    match: \b[uU]\+[0-9a-fA-F\?]{1,6}(-[0-9a-fA-F\?]{1,6})?

  unit:
    # name: invalid.deprecated.css
    match: ([-+]?([0-9]+|[0-9]*\.[0-9]+)([eE][-+]?[0-9]*)?)((r?em|ex|ch|v(h|w|min|max)|p(x|t|c)|(c|m|mozm)m|in|m?s|dp(cm|i|px)|deg|g?rad|turn|k?Hz|%))
    captures:
      '1': {name: constant.numeric.css}
      '4': {name: keyword.unit.css}

  url:
    # name: invalid.deprecated.css
    begin: (url)\(
    beginCaptures:
      '1': {name: entity.name.function.css}
    patterns:
    - include: '#block-comment'
    - include: '#double-quoted-string'
    - include: '#single-quoted-string'
    - include: '#url-unquoted'
    end: \)

  url-unquoted:
    name: string.unquoted.css
    match: ([^\"\'\(\)\s\p{^Print}]|\\([^\n0-9a-fA-F]|[0-9a-fA-F]{1,6}\s))+

  value:
    # name: invalid.deprecated.css
    begin: ':'
    patterns:
    - include: '#block-comment'
    - include: '#double-quoted-string'
    - include: '#single-quoted-string'
    - include: '#url'
    - include: '#function'
    - include: '#unit'
    - include: '#color-name'
    - include: '#hex-color'
    - include: '#named-value'
    - include: '#number'
    - include: '#identifier'
    end: ;

# TODO
# - many of these rules should be matched case-insensitively, but
#   they're not. see CSS3 Syntax Module Level 3
# - An+B microsyntax
# - generic selector class
# - !important
# - support all experimental prefixed properties, values, at-rules, pseudo-classes
#   pseudo-elements
# - var-*

...
