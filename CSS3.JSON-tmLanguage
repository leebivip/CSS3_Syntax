// [PackageDev] target_format: plist, ext: tmLanguage
{
    "name": "CSS3",
    "scopeName": "text.css",
    "fileTypes": ["css"],
    "uuid": "0c288c1d-d424-476c-aa24-4dac097194a6",

    "patterns": [
        {
            "name": "keyword.other.css",            // FIXME: right name?
            // "match": "(?:[0-9])(?<!\\s)(em|ex|ch|rem|vh|vw|vmin|vmax|px|mm|cm|in|pt|pc|mozmm|ms|s|dpcm|dpi|dppx|deg|grad|rad|turn|khz|hz)",
            "match": "(r?em|ex|ch|v(h|w|min|max)|p(x|t|c)|(c|m|mozm)m|in|m?s|dp(cm|i|px)|deg|g?rad|turn|k?Hz)",
            "comment": "Units (px, em, deg)"
        },
        {
            "name": "entity.name.tag.css",          // FIXME: right name?
            "match": "#[_a-zA-Z]+[_a-zA-Z0-9-]*",   // FIXME: Doesn't use official regex for ident (no support for esaped unicode chars. doesn't support leading dash)
            "comment": "Element ID (#header, #logo)"
        },
        {
            "name": "entity.name.function.css",     // FIXME: right name?
            "match": "\\.[_a-zA-Z]+[_a-zA-Z0-9-]*", // FIXME: should support escaped unicode chars and leading dash
            "comment": "Element class (.comment, .alert)"

            // FIXME: Official regex for idents doesn't work (Error: too short multibyte code string)
            // "match": "[-]?([_a-z]|[^\\0-\\237]|(\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?|\\\\[^\\n\\r\\f0-9a-f]))([_a-z0-9-]|[^\\0-\\237]|(\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?|\\\\[^\\n\\r\\f0-9a-f]))*",
        },
        // {
        //     "name": "keyword.other.css",             // FIXME: right name?
        //     "match": "[-+]?[0-9]+|[0-9]*\\.[0-9]+%", // FIXME: can't match the stupid % sign!
        //     "comment": "Percentage (75%, 100.01%)"
        // },
        {
            "name": "constant.numeric.css",
            "match": "[-+]?[0-9]+|[0-9]*\\.[0-9]+",
            "comment": "Numeric literals (42, 3.14)"
        },
        {
            "name": "invalid.illegal",
            "match": ":(after|before|first-(letter|line))",
            "comment": "Invalid pseudo-elements (:after instead of ::after)"
        },
        {
            "name": "variable.parameter.css",       // FIXME: right name?
            "match": ":(active|checked|default|dir|disabled|empty|enabled|first(-(child|of-type))?|focus|fullscreen|hover|indeterminate|in-range|invalid|lang|last-(child|of-type)|left|link|not|nth-(child|last-(child|of-type)|of-type)|only-(child|of-type)|optional|out-of-range|read-(only|write)|required|right|root|scope|target|valid|visited)",
            "comment": "Pseudo class (:hover, :first-child)"
        },
        {
            "name": "constant.numeric.css",         // FIXME: right name?
            "match": "::(after|before|choices|first-(letter|line)|repeat-(index|item)|selection|value)",
            "comment": "Pseudo element (::first-line, ::after)"
        },
        {
            "name": "entity.name.function.css",
            "match": "((attr|blur|brightness|calc|contrast|cross-fade|cubic-bezier|cycle|drop-shadow|element|grayscale|hsla?|hue-rotate|image|invert|linear-gradient|matrix(3d)?|opacity|perspective|radial-gradient|rect|repeating-(linear|radial)-gradient|rgba?|rotate(x|y|z|3d)?|saturate|scale(x|y|z|3d)?|sepia|skew(x|y)?|steps|translate(x|y|z|3d)?|url|var))(?=\\()",
            "comment": "Function (url(), calc())"
        },
        {
            "name": "keyword.other.css",            // FIXME: right name?
            "match": "@(charset|document|font-(face|feature-values)|import|keyframes|media|namespace|page|supports|viewport)\\b",
            "comment": "@ rules (@media, @import)"
        },
        {
            "name": "storage.type.css",             // FIXME: right name?
            "match": "(align-(content|items|self)|all|animation(-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function))?|auto|backface-visibility|background(-(attachment|clip|color|image|origin|position|repeat|size))?|border(-(bottom(-(color|(left|right)-radius|style|width))?|collapse|color|image(-(outset|repeat|slice|source|width))?|left(-(color|style|width))?|radius|right(-(color|style|width))?|spacing|style|top(-(color|(left|right)-radius|style|width))?|width))?|bottom|box-(decoration-break|shadow|sizing)|break-(after|before|inside)|caption-side|clear|clip(-path)?|color|columns|column-(count|fill|gap|rule(-(color|style|width))?|span|width)|content|counter-(increment|reset)|cursor|direction|display|empty-cells|filter|flex(-(basis|direction|flow|grow|shrink|wrap))?|float|font(-(family|feature-settings|kerning|language-override|size(-adjust)?|stretch|style|synthesis|variant(-(alternates|caps|east-asian|ligatures|numeric|position))?|weight))?|height|hyphens|icon|image-(rendering|resolution|orientation)|ime-mode|inherit|initial|justify-content|left|letter-spacing|line-height|list-style(-(image|position|type))?|margin(-(bottom|left|right|top))?|marks|mask(-type)?|max-(height|width)|min-(height|width)|nav-(down|index|left|right|up)|none|normal|object-(fit|position)|opacity|order|orphans|outline(-(color|offset|style|width))?|overflow(-(wrap|x|y|))?|padding(-(bottom|left|right|top))?|page-break-(after|before|inside)|perspective(-origin)?|pointer-events|position|quotes|resize|right|table-layout|tab-size|text-(align(-last)?|combine-horizontal|decoration(-(color|line|style))?|indent|orientation|overflow|rendering|shadow|transform|underline-position)|top|touch-action|transform(-(origin|style))?|transition(-(delay|duration|property|timing-function))?|unicode-(bidi|range)|vertical-align|visibility|white-space|widows|width|word-(break|spacing|wrap)|writing-mode|z-index)",
            "comment": "Properties (color, margin-left)"
        },
        {
            "name": "entity.name.tag.css",          // FIXME: right name?
            "match": "\\b(html|head|title|base|link|meta|style|script|noscript|body|section|nav|article|aside|h1|h2|h3|h4|h5|h6|header|footer|address|main|p|hr|pre|blockquote|ol|ul|li|dl|dt|dd|figure|figcaption|div|a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img|iframe|embed|object|param|video|audio|source|track|canvas|map|area|svg|math|table|caption|colgroup|col|tbody|thead|tfoot|tr|td|th|form|fieldset|legend|label|input|button|select|datalist|optgroup|option|textarea|keygen|output|progress|meter|details|summary|menuitem|menu)\\b",
            "comment": "HTML elements (body, nav)"
        },
        {
            "name": "string.quoted.double.css",
            "match": "\\\"([^\\n\\r\\f\\\\\"]|\\\\(\\n|\\r\\n|\\r|\\f)|((\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?)|\\\\[^\\n\\r\\f0-9a-f]))*\\\"",
            "comment": "Double-quoted strings"
        },
        {
            "name": "string.quoted.single.css",
            "match": "\\'([^\\n\\r\\f\\\\']|\\\\(\\n|\\r\\n|\\r|\\f)|((\\\\[0-9a-f]{1,6}(\\r\\n|[ \\n\\r\\t\\f])?)|\\\\[^\\n\\r\\f0-9a-f]))*\\'",
            "comment": "Single-quoted strings"
        },
        {
            "name": "comment.block.css",
            "begin": "\/\\*",
            "end": "\\*\/",
            "comment": "Block comments"

            // FIXME: Official regex doesn't work with multiline block comments. Is this really a
            // problem since we're using begin/end to do the exact same thing?
            // "match": "\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\/",
        }
    ]
}
